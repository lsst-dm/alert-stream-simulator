# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # The test job runs unit tests - anything that doesn't depend on a real broker
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install snappy
      run: sudo apt-get install libsnappy-dev

    - name: Install program, including any dev dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install '.[dev]'

    - name: Run linter
      run: make lint

  # The integration-test job runs integration tests which actually talk to a
  # kafka broker

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Run docker-compose up
      run: docker-compose up -d
    - name: Check that containers are up
      run: docker ps -a

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install snappy
      run: sudo apt-get install libsnappy-dev

    - name: Install rubin-alert-sim program
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install .[dev]

    - name: Run python integration tests
      run: make test

    - name: Try sending a test alert file
      # TODO: Add verification that it was written correctly. For now, we just
      # hope for a zero exit code.
      run: |
        make data/rubin_single_ccd_sample.avro
        rubin-alert-sim --debug create-stream --dst-topic=test-reservoir ./data/rubin_single_ccd_sample.avro
        rubin-alert-sim --debug play-stream --src-topic=test-reservoir --dst-topic=test-stream

  image:
    runs-on: ubuntu-latest
    needs: [test]

    # Only do Docker builds of tagged releases and pull requests from ticket
    # branches.  This will still trigger on pull requests from untrusted
    # repositories whose branch names match our tickets/* branch convention,
    # but in this case the build will fail with an error since the secret
    # won't be set.
    if: >
      startsWith(github.ref, 'refs/tags/')
      || startsWith(github.head_ref, 'tickets/')

    steps:
      - uses: actions/checkout@v2

      - name: Define the Docker tag
        id: vars
        run: echo ::set-output name=tag::$(scripts/docker-tag.sh "$GITHUB_REF")

      - name: Print the tag
        id: print
        run: echo ${{ steps.vars.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys:
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          # TODO: get acccess to lsstdm instead of swnelson personal repo
          tags: swnelson/alert-stream-simulator:${{ steps.vars.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
