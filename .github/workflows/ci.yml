# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # The test job runs unit tests - anything that doesn't depend on a real broker
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install program, including any dev dependencies
      run: pip install '.[dev]'

    - name: Run linter
      run: make lint

  # The integration-test job runs integration tests which actually talk to a
  # kafka broker
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Run docker-compose up
      run: docker-compose up -d
    - name: Check that containers are up
      run: docker ps -a

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install rubin-alert-sim program
      run: pip install .[dev]

    - name: Run python integration tests
      run: make test

    - name: Try sending a test alert file
      # TODO: Add verification that it was written correctly. For now, we just
      # hope for a zero exit code.
      run: |
        rubin-alert-sim --debug create-stream --dst-topic=test-reservoir ./test/fixtures/fakeAlert.avro
        rubin-alert-sim --debug play-stream --src-topic=test-reservoir --dst-topic=test-stream
