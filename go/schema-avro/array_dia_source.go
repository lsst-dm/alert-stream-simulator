// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"

	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
)

func writeArrayDiaSource(r []*DiaSource, w io.Writer) error {
	err := vm.WriteLong(int64(len(r)),w)
	if err != nil || len(r) == 0 {
		return err
	}
	for _, e := range r {
		err = writeDiaSource(e, w)
		if err != nil {
			return err
		}
	}
	return vm.WriteLong(0,w)
}



type ArrayDiaSourceWrapper []*DiaSource

func (_ *ArrayDiaSourceWrapper) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetInt(v int32) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetLong(v int64) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetString(v string) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) SetUnionElem(v int64) { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) Get(i int) types.Field { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ArrayDiaSourceWrapper) Finalize() { }
func (_ *ArrayDiaSourceWrapper) SetDefault(i int) { panic("Unsupported operation") }
func (r *ArrayDiaSourceWrapper) AppendArray() types.Field {
	var v *DiaSource
	
	v = NewDiaSource()

 	
	*r = append(*r, v)
        
        return (*r)[len(*r)-1]
        
}
