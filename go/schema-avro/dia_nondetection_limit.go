// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type DiaNondetectionLimit struct {

	
	
		CcdVisitId int64
	

	
	
		MidPointTai float64
	

	
	
		FilterName string
	

	
	
		DiaNoise float32
	

}

const DiaNondetectionLimitAvroCRC64Fingerprint = "9M\xb6\x9d\u038d\xadd"

func NewDiaNondetectionLimit() (*DiaNondetectionLimit) {
	return &DiaNondetectionLimit{}
}

func DeserializeDiaNondetectionLimit(r io.Reader) (*DiaNondetectionLimit, error) {
	t := NewDiaNondetectionLimit()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeDiaNondetectionLimitFromSchema(r io.Reader, schema string) (*DiaNondetectionLimit, error) {
	t := NewDiaNondetectionLimit()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeDiaNondetectionLimit(r *DiaNondetectionLimit, w io.Writer) error {
	var err error
	
	err = vm.WriteLong( r.CcdVisitId, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.MidPointTai, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.FilterName, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.DiaNoise, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *DiaNondetectionLimit) Serialize(w io.Writer) error {
	return writeDiaNondetectionLimit(r, w)
}

func (r *DiaNondetectionLimit) Schema() string {
	return "{\"fields\":[{\"name\":\"ccdVisitId\",\"type\":\"long\"},{\"name\":\"midPointTai\",\"type\":\"double\"},{\"name\":\"filterName\",\"type\":\"string\"},{\"name\":\"diaNoise\",\"type\":\"float\"}],\"name\":\"lsst.alert.diaNondetectionLimit\",\"type\":\"record\"}"
}

func (r *DiaNondetectionLimit) SchemaName() string {
	return "lsst.alert.diaNondetectionLimit"
}

func (_ *DiaNondetectionLimit) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetInt(v int32) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetLong(v int64) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetString(v string) { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DiaNondetectionLimit) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Long)(&r.CcdVisitId)
		
	
	case 1:
		
		
			return (*types.Double)(&r.MidPointTai)
		
	
	case 2:
		
		
			return (*types.String)(&r.FilterName)
		
	
	case 3:
		
		
			return (*types.Float)(&r.DiaNoise)
		
	
	}
	panic("Unknown field index")
}

func (r *DiaNondetectionLimit) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *DiaNondetectionLimit) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *DiaNondetectionLimit) Finalize() { }


func (_ *DiaNondetectionLimit) AvroCRC64Fingerprint() []byte {
  return []byte(DiaNondetectionLimitAvroCRC64Fingerprint)
}
