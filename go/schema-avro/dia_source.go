// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type DiaSource struct {

	
	
		DiaSourceId int64
	

	
	
		CcdVisitId int64
	

	
	
		DiaObjectId *UnionNullLong
	

	
	
		SsObjectId *UnionNullLong
	

	
	
		ParentDiaSourceId *UnionNullLong
	

	
	
		MidPointTai float64
	

	
	
		FilterName string
	

	
	
		ProgramId int32
	

	
	
		Ra float64
	

	
	
		Decl float64
	

	
	
		Ra_decl_Cov *UnionNullRa_decl_Cov
	

	
	
		X float32
	

	
	
		Y float32
	

	
	
		X_y_Cov *UnionNullX_y_Cov
	

	
	
		ApFlux float32
	

	
	
		ApFluxErr float32
	

	
	
		Snr float32
	

	
	
		PsFlux float32
	

	
	
		PsFluxErr float32
	

	
	
		PsRa *UnionNullDouble
	

	
	
		PsDecl *UnionNullDouble
	

	
	
		Ps_Cov *UnionNullPs_Cov
	

	
	
		PsLnL *UnionNullFloat
	

	
	
		PsChi2 *UnionNullFloat
	

	
	
		PsNdata *UnionNullInt
	

	
	
		TrailFlux *UnionNullFloat
	

	
	
		TrailRa *UnionNullDouble
	

	
	
		TrailDecl *UnionNullDouble
	

	
	
		TrailLength *UnionNullFloat
	

	
	
		TrailAngle *UnionNullFloat
	

	
	
		Trail_Cov *UnionNullTrail_Cov
	

	
	
		TrailLnL *UnionNullFloat
	

	
	
		TrailChi2 *UnionNullFloat
	

	
	
		TrailNdata *UnionNullInt
	

	
	
		DipMeanFlux *UnionNullFloat
	

	
	
		DipFluxDiff *UnionNullFloat
	

	
	
		DipRa *UnionNullDouble
	

	
	
		DipDecl *UnionNullDouble
	

	
	
		DipLength *UnionNullFloat
	

	
	
		DipAngle *UnionNullFloat
	

	
	
		Dip_Cov *UnionNullDip_Cov
	

	
	
		DipLnL *UnionNullFloat
	

	
	
		DipChi2 *UnionNullFloat
	

	
	
		DipNdata *UnionNullInt
	

	
	
		TotFlux *UnionNullFloat
	

	
	
		TotFluxErr *UnionNullFloat
	

	
	
		DiffFlux *UnionNullFloat
	

	
	
		DiffFluxErr *UnionNullFloat
	

	
	
		FpBkgd *UnionNullFloat
	

	
	
		FpBkgdErr *UnionNullFloat
	

	
	
		Ixx *UnionNullFloat
	

	
	
		Iyy *UnionNullFloat
	

	
	
		Ixy *UnionNullFloat
	

	
	
		I_cov *UnionNullI_cov
	

	
	
		IxxPSF *UnionNullFloat
	

	
	
		IyyPSF *UnionNullFloat
	

	
	
		IxyPSF *UnionNullFloat
	

	
	
		Extendedness *UnionNullFloat
	

	
	
		Spuriousness *UnionNullFloat
	

	
	
		Flags int64
	

}

const DiaSourceAvroCRC64Fingerprint = "X\x90\x97\xdb\xe6Þ„\xbe"

func NewDiaSource() (*DiaSource) {
	return &DiaSource{}
}

func DeserializeDiaSource(r io.Reader) (*DiaSource, error) {
	t := NewDiaSource()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeDiaSourceFromSchema(r io.Reader, schema string) (*DiaSource, error) {
	t := NewDiaSource()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeDiaSource(r *DiaSource, w io.Writer) error {
	var err error
	
	err = vm.WriteLong( r.DiaSourceId, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.CcdVisitId, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.DiaObjectId, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.SsObjectId, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullLong( r.ParentDiaSourceId, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.MidPointTai, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteString( r.FilterName, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteInt( r.ProgramId, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Ra, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteDouble( r.Decl, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullRa_decl_Cov( r.Ra_decl_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.X, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Y, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullX_y_Cov( r.X_y_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.ApFlux, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.ApFluxErr, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Snr, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.PsFlux, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.PsFluxErr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.PsRa, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.PsDecl, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullPs_Cov( r.Ps_Cov, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.PsLnL, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.PsChi2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.PsNdata, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TrailFlux, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.TrailRa, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.TrailDecl, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TrailLength, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TrailAngle, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullTrail_Cov( r.Trail_Cov, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TrailLnL, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TrailChi2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.TrailNdata, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipMeanFlux, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipFluxDiff, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.DipRa, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDouble( r.DipDecl, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipLength, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipAngle, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullDip_Cov( r.Dip_Cov, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipLnL, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DipChi2, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullInt( r.DipNdata, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TotFlux, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.TotFluxErr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DiffFlux, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.DiffFluxErr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.FpBkgd, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.FpBkgdErr, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ixx, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Iyy, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Ixy, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullI_cov( r.I_cov, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.IxxPSF, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.IyyPSF, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.IxyPSF, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Extendedness, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.Spuriousness, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteLong( r.Flags, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *DiaSource) Serialize(w io.Writer) error {
	return writeDiaSource(r, w)
}

func (r *DiaSource) Schema() string {
	return "{\"fields\":[{\"name\":\"diaSourceId\",\"type\":\"long\"},{\"name\":\"ccdVisitId\",\"type\":\"long\"},{\"default\":null,\"name\":\"diaObjectId\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"ssObjectId\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"parentDiaSourceId\",\"type\":[\"null\",\"long\"]},{\"name\":\"midPointTai\",\"type\":\"double\"},{\"name\":\"filterName\",\"type\":\"string\"},{\"name\":\"programId\",\"type\":\"int\"},{\"name\":\"ra\",\"type\":\"double\"},{\"name\":\"decl\",\"type\":\"double\"},{\"default\":null,\"name\":\"ra_decl_Cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"raSigma\",\"type\":\"float\"},{\"name\":\"declSigma\",\"type\":\"float\"},{\"name\":\"ra_decl_Cov\",\"type\":\"float\"}],\"name\":\"ra_decl_Cov\",\"type\":\"record\"}]},{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"},{\"default\":null,\"name\":\"x_y_Cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"xSigma\",\"type\":\"float\"},{\"name\":\"ySigma\",\"type\":\"float\"},{\"name\":\"x_y_Cov\",\"type\":\"float\"}],\"name\":\"x_y_Cov\",\"type\":\"record\"}]},{\"name\":\"apFlux\",\"type\":\"float\"},{\"name\":\"apFluxErr\",\"type\":\"float\"},{\"name\":\"snr\",\"type\":\"float\"},{\"name\":\"psFlux\",\"type\":\"float\"},{\"name\":\"psFluxErr\",\"type\":\"float\"},{\"default\":null,\"name\":\"psRa\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"psDecl\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"ps_Cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"psFluxSigma\",\"type\":\"float\"},{\"name\":\"psRaSigma\",\"type\":\"float\"},{\"name\":\"psDeclSigma\",\"type\":\"float\"},{\"name\":\"psFlux_psRa_Cov\",\"type\":\"float\"},{\"name\":\"psFlux_psDecl_Cov\",\"type\":\"float\"},{\"name\":\"psRa_psDecl_Cov\",\"type\":\"float\"}],\"name\":\"ps_Cov\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"psLnL\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"psChi2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"psNdata\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"trailFlux\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"trailRa\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"trailDecl\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"trailLength\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"trailAngle\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"trail_Cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"trailFluxSigma\",\"type\":\"float\"},{\"name\":\"trailRaSigma\",\"type\":\"float\"},{\"name\":\"trailDeclSigma\",\"type\":\"float\"},{\"name\":\"trailLengthSigma\",\"type\":\"float\"},{\"name\":\"trailAngleSigma\",\"type\":\"float\"},{\"name\":\"trailFlux_trailRa_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailDecl_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailDecl_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailDecl_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailDecl_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailLength_trailAngle_Cov\",\"type\":\"float\"}],\"name\":\"trail_Cov\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"trailLnL\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"trailChi2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"trailNdata\",\"type\":[\"null\",\"int\"]},{\"default\":null,\"name\":\"dipMeanFlux\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dipFluxDiff\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dipRa\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"dipDecl\",\"type\":[\"null\",\"double\"]},{\"default\":null,\"name\":\"dipLength\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dipAngle\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dip_Cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"dipMeanFluxSigma\",\"type\":\"float\"},{\"name\":\"dipFluxDiffSigma\",\"type\":\"float\"},{\"name\":\"dipRaSigma\",\"type\":\"float\"},{\"name\":\"dipDeclSigma\",\"type\":\"float\"},{\"name\":\"dipLengthSigma\",\"type\":\"float\"},{\"name\":\"dipAngleSigma\",\"type\":\"float\"},{\"name\":\"dipMeanFlux_dipFluxDiff_Cov\",\"type\":\"float\"},{\"name\":\"dipMeanFlux_dipRa_Cov\",\"type\":\"float\"},{\"name\":\"dipMeanFlux_dipDecl_Cov\",\"type\":\"float\"},{\"name\":\"dipMeanFlux_dipLength_Cov\",\"type\":\"float\"},{\"name\":\"dipMeanFlux_dipAngle_Cov\",\"type\":\"float\"},{\"name\":\"dipFluxDiff_dipRa_Cov\",\"type\":\"float\"},{\"name\":\"dipFluxDiff_dipDecl_Cov\",\"type\":\"float\"},{\"name\":\"dipFluxDiff_dipLength_Cov\",\"type\":\"float\"},{\"name\":\"dipFluxDiff_dipAngle_Cov\",\"type\":\"float\"},{\"name\":\"dipRa_dipDecl_Cov\",\"type\":\"float\"},{\"name\":\"dipRa_dipLength_Cov\",\"type\":\"float\"},{\"name\":\"dipRa_dipAngle_Cov\",\"type\":\"float\"},{\"name\":\"dipDecl_dipLength_Cov\",\"type\":\"float\"},{\"name\":\"dipDecl_dipAngle_Cov\",\"type\":\"float\"},{\"name\":\"dipLength_dipAngle_Cov\",\"type\":\"float\"}],\"name\":\"dip_Cov\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"dipLnL\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dipChi2\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"dipNdata\",\"type\":[\"null\",\"int\"]},{\"aliases\":[\"fpFlux\"],\"default\":null,\"name\":\"totFlux\",\"type\":[\"null\",\"float\"]},{\"aliases\":[\"fpFluxSigma\"],\"default\":null,\"name\":\"totFluxErr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"diffFlux\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"diffFluxErr\",\"type\":[\"null\",\"float\"]},{\"aliases\":[\"fpSky\"],\"default\":null,\"name\":\"fpBkgd\",\"type\":[\"null\",\"float\"]},{\"aliases\":[\"fpSkySigma\"],\"default\":null,\"name\":\"fpBkgdErr\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"ixx\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iyy\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"ixy\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"i_cov\",\"type\":[\"null\",{\"fields\":[{\"name\":\"ixxSigma\",\"type\":\"float\"},{\"name\":\"iyySigma\",\"type\":\"float\"},{\"name\":\"ixySigma\",\"type\":\"float\"},{\"name\":\"ixx_iyy_Cov\",\"type\":\"float\"},{\"name\":\"ixx_ixy_Cov\",\"type\":\"float\"},{\"name\":\"iyy_ixy_Cov\",\"type\":\"float\"}],\"name\":\"i_cov\",\"type\":\"record\"}]},{\"default\":null,\"name\":\"ixxPSF\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iyyPSF\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"ixyPSF\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"extendedness\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"spuriousness\",\"type\":[\"null\",\"float\"]},{\"name\":\"flags\",\"type\":\"long\"}],\"name\":\"lsst.alert.diaSource\",\"type\":\"record\"}"
}

func (r *DiaSource) SchemaName() string {
	return "lsst.alert.diaSource"
}

func (_ *DiaSource) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *DiaSource) SetInt(v int32) { panic("Unsupported operation") }
func (_ *DiaSource) SetLong(v int64) { panic("Unsupported operation") }
func (_ *DiaSource) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *DiaSource) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *DiaSource) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *DiaSource) SetString(v string) { panic("Unsupported operation") }
func (_ *DiaSource) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DiaSource) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Long)(&r.DiaSourceId)
		
	
	case 1:
		
		
			return (*types.Long)(&r.CcdVisitId)
		
	
	case 2:
		
			r.DiaObjectId = NewUnionNullLong()

		
		
			return r.DiaObjectId
		
	
	case 3:
		
			r.SsObjectId = NewUnionNullLong()

		
		
			return r.SsObjectId
		
	
	case 4:
		
			r.ParentDiaSourceId = NewUnionNullLong()

		
		
			return r.ParentDiaSourceId
		
	
	case 5:
		
		
			return (*types.Double)(&r.MidPointTai)
		
	
	case 6:
		
		
			return (*types.String)(&r.FilterName)
		
	
	case 7:
		
		
			return (*types.Int)(&r.ProgramId)
		
	
	case 8:
		
		
			return (*types.Double)(&r.Ra)
		
	
	case 9:
		
		
			return (*types.Double)(&r.Decl)
		
	
	case 10:
		
			r.Ra_decl_Cov = NewUnionNullRa_decl_Cov()

		
		
			return r.Ra_decl_Cov
		
	
	case 11:
		
		
			return (*types.Float)(&r.X)
		
	
	case 12:
		
		
			return (*types.Float)(&r.Y)
		
	
	case 13:
		
			r.X_y_Cov = NewUnionNullX_y_Cov()

		
		
			return r.X_y_Cov
		
	
	case 14:
		
		
			return (*types.Float)(&r.ApFlux)
		
	
	case 15:
		
		
			return (*types.Float)(&r.ApFluxErr)
		
	
	case 16:
		
		
			return (*types.Float)(&r.Snr)
		
	
	case 17:
		
		
			return (*types.Float)(&r.PsFlux)
		
	
	case 18:
		
		
			return (*types.Float)(&r.PsFluxErr)
		
	
	case 19:
		
			r.PsRa = NewUnionNullDouble()

		
		
			return r.PsRa
		
	
	case 20:
		
			r.PsDecl = NewUnionNullDouble()

		
		
			return r.PsDecl
		
	
	case 21:
		
			r.Ps_Cov = NewUnionNullPs_Cov()

		
		
			return r.Ps_Cov
		
	
	case 22:
		
			r.PsLnL = NewUnionNullFloat()

		
		
			return r.PsLnL
		
	
	case 23:
		
			r.PsChi2 = NewUnionNullFloat()

		
		
			return r.PsChi2
		
	
	case 24:
		
			r.PsNdata = NewUnionNullInt()

		
		
			return r.PsNdata
		
	
	case 25:
		
			r.TrailFlux = NewUnionNullFloat()

		
		
			return r.TrailFlux
		
	
	case 26:
		
			r.TrailRa = NewUnionNullDouble()

		
		
			return r.TrailRa
		
	
	case 27:
		
			r.TrailDecl = NewUnionNullDouble()

		
		
			return r.TrailDecl
		
	
	case 28:
		
			r.TrailLength = NewUnionNullFloat()

		
		
			return r.TrailLength
		
	
	case 29:
		
			r.TrailAngle = NewUnionNullFloat()

		
		
			return r.TrailAngle
		
	
	case 30:
		
			r.Trail_Cov = NewUnionNullTrail_Cov()

		
		
			return r.Trail_Cov
		
	
	case 31:
		
			r.TrailLnL = NewUnionNullFloat()

		
		
			return r.TrailLnL
		
	
	case 32:
		
			r.TrailChi2 = NewUnionNullFloat()

		
		
			return r.TrailChi2
		
	
	case 33:
		
			r.TrailNdata = NewUnionNullInt()

		
		
			return r.TrailNdata
		
	
	case 34:
		
			r.DipMeanFlux = NewUnionNullFloat()

		
		
			return r.DipMeanFlux
		
	
	case 35:
		
			r.DipFluxDiff = NewUnionNullFloat()

		
		
			return r.DipFluxDiff
		
	
	case 36:
		
			r.DipRa = NewUnionNullDouble()

		
		
			return r.DipRa
		
	
	case 37:
		
			r.DipDecl = NewUnionNullDouble()

		
		
			return r.DipDecl
		
	
	case 38:
		
			r.DipLength = NewUnionNullFloat()

		
		
			return r.DipLength
		
	
	case 39:
		
			r.DipAngle = NewUnionNullFloat()

		
		
			return r.DipAngle
		
	
	case 40:
		
			r.Dip_Cov = NewUnionNullDip_Cov()

		
		
			return r.Dip_Cov
		
	
	case 41:
		
			r.DipLnL = NewUnionNullFloat()

		
		
			return r.DipLnL
		
	
	case 42:
		
			r.DipChi2 = NewUnionNullFloat()

		
		
			return r.DipChi2
		
	
	case 43:
		
			r.DipNdata = NewUnionNullInt()

		
		
			return r.DipNdata
		
	
	case 44:
		
			r.TotFlux = NewUnionNullFloat()

		
		
			return r.TotFlux
		
	
	case 45:
		
			r.TotFluxErr = NewUnionNullFloat()

		
		
			return r.TotFluxErr
		
	
	case 46:
		
			r.DiffFlux = NewUnionNullFloat()

		
		
			return r.DiffFlux
		
	
	case 47:
		
			r.DiffFluxErr = NewUnionNullFloat()

		
		
			return r.DiffFluxErr
		
	
	case 48:
		
			r.FpBkgd = NewUnionNullFloat()

		
		
			return r.FpBkgd
		
	
	case 49:
		
			r.FpBkgdErr = NewUnionNullFloat()

		
		
			return r.FpBkgdErr
		
	
	case 50:
		
			r.Ixx = NewUnionNullFloat()

		
		
			return r.Ixx
		
	
	case 51:
		
			r.Iyy = NewUnionNullFloat()

		
		
			return r.Iyy
		
	
	case 52:
		
			r.Ixy = NewUnionNullFloat()

		
		
			return r.Ixy
		
	
	case 53:
		
			r.I_cov = NewUnionNullI_cov()

		
		
			return r.I_cov
		
	
	case 54:
		
			r.IxxPSF = NewUnionNullFloat()

		
		
			return r.IxxPSF
		
	
	case 55:
		
			r.IyyPSF = NewUnionNullFloat()

		
		
			return r.IyyPSF
		
	
	case 56:
		
			r.IxyPSF = NewUnionNullFloat()

		
		
			return r.IxyPSF
		
	
	case 57:
		
			r.Extendedness = NewUnionNullFloat()

		
		
			return r.Extendedness
		
	
	case 58:
		
			r.Spuriousness = NewUnionNullFloat()

		
		
			return r.Spuriousness
		
	
	case 59:
		
		
			return (*types.Long)(&r.Flags)
		
	
	}
	panic("Unknown field index")
}

func (r *DiaSource) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	case 2:
       	 	r.DiaObjectId = NewUnionNullLong()

		return
	
	
        
	case 3:
       	 	r.SsObjectId = NewUnionNullLong()

		return
	
	
        
	case 4:
       	 	r.ParentDiaSourceId = NewUnionNullLong()

		return
	
	
        
	
        
	
        
	
        
	
        
	
        
	case 10:
       	 	r.Ra_decl_Cov = NewUnionNullRa_decl_Cov()

		return
	
	
        
	
        
	
        
	case 13:
       	 	r.X_y_Cov = NewUnionNullX_y_Cov()

		return
	
	
        
	
        
	
        
	
        
	
        
	
        
	case 19:
       	 	r.PsRa = NewUnionNullDouble()

		return
	
	
        
	case 20:
       	 	r.PsDecl = NewUnionNullDouble()

		return
	
	
        
	case 21:
       	 	r.Ps_Cov = NewUnionNullPs_Cov()

		return
	
	
        
	case 22:
       	 	r.PsLnL = NewUnionNullFloat()

		return
	
	
        
	case 23:
       	 	r.PsChi2 = NewUnionNullFloat()

		return
	
	
        
	case 24:
       	 	r.PsNdata = NewUnionNullInt()

		return
	
	
        
	case 25:
       	 	r.TrailFlux = NewUnionNullFloat()

		return
	
	
        
	case 26:
       	 	r.TrailRa = NewUnionNullDouble()

		return
	
	
        
	case 27:
       	 	r.TrailDecl = NewUnionNullDouble()

		return
	
	
        
	case 28:
       	 	r.TrailLength = NewUnionNullFloat()

		return
	
	
        
	case 29:
       	 	r.TrailAngle = NewUnionNullFloat()

		return
	
	
        
	case 30:
       	 	r.Trail_Cov = NewUnionNullTrail_Cov()

		return
	
	
        
	case 31:
       	 	r.TrailLnL = NewUnionNullFloat()

		return
	
	
        
	case 32:
       	 	r.TrailChi2 = NewUnionNullFloat()

		return
	
	
        
	case 33:
       	 	r.TrailNdata = NewUnionNullInt()

		return
	
	
        
	case 34:
       	 	r.DipMeanFlux = NewUnionNullFloat()

		return
	
	
        
	case 35:
       	 	r.DipFluxDiff = NewUnionNullFloat()

		return
	
	
        
	case 36:
       	 	r.DipRa = NewUnionNullDouble()

		return
	
	
        
	case 37:
       	 	r.DipDecl = NewUnionNullDouble()

		return
	
	
        
	case 38:
       	 	r.DipLength = NewUnionNullFloat()

		return
	
	
        
	case 39:
       	 	r.DipAngle = NewUnionNullFloat()

		return
	
	
        
	case 40:
       	 	r.Dip_Cov = NewUnionNullDip_Cov()

		return
	
	
        
	case 41:
       	 	r.DipLnL = NewUnionNullFloat()

		return
	
	
        
	case 42:
       	 	r.DipChi2 = NewUnionNullFloat()

		return
	
	
        
	case 43:
       	 	r.DipNdata = NewUnionNullInt()

		return
	
	
        
	case 44:
       	 	r.TotFlux = NewUnionNullFloat()

		return
	
	
        
	case 45:
       	 	r.TotFluxErr = NewUnionNullFloat()

		return
	
	
        
	case 46:
       	 	r.DiffFlux = NewUnionNullFloat()

		return
	
	
        
	case 47:
       	 	r.DiffFluxErr = NewUnionNullFloat()

		return
	
	
        
	case 48:
       	 	r.FpBkgd = NewUnionNullFloat()

		return
	
	
        
	case 49:
       	 	r.FpBkgdErr = NewUnionNullFloat()

		return
	
	
        
	case 50:
       	 	r.Ixx = NewUnionNullFloat()

		return
	
	
        
	case 51:
       	 	r.Iyy = NewUnionNullFloat()

		return
	
	
        
	case 52:
       	 	r.Ixy = NewUnionNullFloat()

		return
	
	
        
	case 53:
       	 	r.I_cov = NewUnionNullI_cov()

		return
	
	
        
	case 54:
       	 	r.IxxPSF = NewUnionNullFloat()

		return
	
	
        
	case 55:
       	 	r.IyyPSF = NewUnionNullFloat()

		return
	
	
        
	case 56:
       	 	r.IxyPSF = NewUnionNullFloat()

		return
	
	
        
	case 57:
       	 	r.Extendedness = NewUnionNullFloat()

		return
	
	
        
	case 58:
       	 	r.Spuriousness = NewUnionNullFloat()

		return
	
	
        
	
	}
	panic("Unknown field index")
}

func (_ *DiaSource) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *DiaSource) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *DiaSource) Finalize() { }


func (_ *DiaSource) AvroCRC64Fingerprint() []byte {
  return []byte(DiaSourceAvroCRC64Fingerprint)
}
