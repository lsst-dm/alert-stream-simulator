// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type I_cov struct {

	
	
		IxxSigma float32
	

	
	
		IyySigma float32
	

	
	
		IxySigma float32
	

	
	
		Ixx_iyy_Cov float32
	

	
	
		Ixx_ixy_Cov float32
	

	
	
		Iyy_ixy_Cov float32
	

}

const I_covAvroCRC64Fingerprint = "T\xf2\u05cc…ù#)"

func NewI_cov() (*I_cov) {
	return &I_cov{}
}

func DeserializeI_cov(r io.Reader) (*I_cov, error) {
	t := NewI_cov()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeI_covFromSchema(r io.Reader, schema string) (*I_cov, error) {
	t := NewI_cov()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeI_cov(r *I_cov, w io.Writer) error {
	var err error
	
	err = vm.WriteFloat( r.IxxSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.IyySigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.IxySigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Ixx_iyy_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Ixx_ixy_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.Iyy_ixy_Cov, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *I_cov) Serialize(w io.Writer) error {
	return writeI_cov(r, w)
}

func (r *I_cov) Schema() string {
	return "{\"fields\":[{\"name\":\"ixxSigma\",\"type\":\"float\"},{\"name\":\"iyySigma\",\"type\":\"float\"},{\"name\":\"ixySigma\",\"type\":\"float\"},{\"name\":\"ixx_iyy_Cov\",\"type\":\"float\"},{\"name\":\"ixx_ixy_Cov\",\"type\":\"float\"},{\"name\":\"iyy_ixy_Cov\",\"type\":\"float\"}],\"name\":\"lsst.alert.i_cov\",\"type\":\"record\"}"
}

func (r *I_cov) SchemaName() string {
	return "lsst.alert.i_cov"
}

func (_ *I_cov) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *I_cov) SetInt(v int32) { panic("Unsupported operation") }
func (_ *I_cov) SetLong(v int64) { panic("Unsupported operation") }
func (_ *I_cov) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *I_cov) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *I_cov) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *I_cov) SetString(v string) { panic("Unsupported operation") }
func (_ *I_cov) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *I_cov) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Float)(&r.IxxSigma)
		
	
	case 1:
		
		
			return (*types.Float)(&r.IyySigma)
		
	
	case 2:
		
		
			return (*types.Float)(&r.IxySigma)
		
	
	case 3:
		
		
			return (*types.Float)(&r.Ixx_iyy_Cov)
		
	
	case 4:
		
		
			return (*types.Float)(&r.Ixx_ixy_Cov)
		
	
	case 5:
		
		
			return (*types.Float)(&r.Iyy_ixy_Cov)
		
	
	}
	panic("Unknown field index")
}

func (r *I_cov) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *I_cov) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *I_cov) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *I_cov) Finalize() { }


func (_ *I_cov) AvroCRC64Fingerprint() []byte {
  return []byte(I_covAvroCRC64Fingerprint)
}
