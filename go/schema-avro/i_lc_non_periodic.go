// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type ILcNonPeriodic struct {

	
	
		ILcNonPeriodic01 *UnionNullFloat
	

	
	
		ILcNonPeriodic02 *UnionNullFloat
	

	
	
		ILcNonPeriodic03 *UnionNullFloat
	

	
	
		ILcNonPeriodic04 *UnionNullFloat
	

	
	
		ILcNonPeriodic05 *UnionNullFloat
	

	
	
		ILcNonPeriodic06 *UnionNullFloat
	

	
	
		ILcNonPeriodic07 *UnionNullFloat
	

	
	
		ILcNonPeriodic08 *UnionNullFloat
	

	
	
		ILcNonPeriodic09 *UnionNullFloat
	

	
	
		ILcNonPeriodic10 *UnionNullFloat
	

	
	
		ILcNonPeriodic11 *UnionNullFloat
	

	
	
		ILcNonPeriodic12 *UnionNullFloat
	

	
	
		ILcNonPeriodic13 *UnionNullFloat
	

	
	
		ILcNonPeriodic14 *UnionNullFloat
	

	
	
		ILcNonPeriodic15 *UnionNullFloat
	

	
	
		ILcNonPeriodic16 *UnionNullFloat
	

	
	
		ILcNonPeriodic17 *UnionNullFloat
	

	
	
		ILcNonPeriodic18 *UnionNullFloat
	

	
	
		ILcNonPeriodic19 *UnionNullFloat
	

	
	
		ILcNonPeriodic20 *UnionNullFloat
	

}

const ILcNonPeriodicAvroCRC64Fingerprint = ">`$\xb1\x1c\xcf\xd9&"

func NewILcNonPeriodic() (*ILcNonPeriodic) {
	return &ILcNonPeriodic{}
}

func DeserializeILcNonPeriodic(r io.Reader) (*ILcNonPeriodic, error) {
	t := NewILcNonPeriodic()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeILcNonPeriodicFromSchema(r io.Reader, schema string) (*ILcNonPeriodic, error) {
	t := NewILcNonPeriodic()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeILcNonPeriodic(r *ILcNonPeriodic, w io.Writer) error {
	var err error
	
	err = writeUnionNullFloat( r.ILcNonPeriodic01, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic02, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic03, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic04, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic05, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic06, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic07, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic08, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic09, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic10, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic11, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic12, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic13, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic14, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic15, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic16, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic17, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic18, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic19, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ILcNonPeriodic20, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *ILcNonPeriodic) Serialize(w io.Writer) error {
	return writeILcNonPeriodic(r, w)
}

func (r *ILcNonPeriodic) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"iLcNonPeriodic01\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic02\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic03\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic04\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic05\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic06\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic07\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic08\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic09\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic10\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic11\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic12\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic13\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic14\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic15\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic16\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic17\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic18\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic19\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"iLcNonPeriodic20\",\"type\":[\"null\",\"float\"]}],\"name\":\"lsst.iLcNonPeriodic\",\"type\":\"record\"}"
}

func (r *ILcNonPeriodic) SchemaName() string {
	return "lsst.iLcNonPeriodic"
}

func (_ *ILcNonPeriodic) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetInt(v int32) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetLong(v int64) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetString(v string) { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ILcNonPeriodic) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.ILcNonPeriodic01 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic01
		
	
	case 1:
		
			r.ILcNonPeriodic02 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic02
		
	
	case 2:
		
			r.ILcNonPeriodic03 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic03
		
	
	case 3:
		
			r.ILcNonPeriodic04 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic04
		
	
	case 4:
		
			r.ILcNonPeriodic05 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic05
		
	
	case 5:
		
			r.ILcNonPeriodic06 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic06
		
	
	case 6:
		
			r.ILcNonPeriodic07 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic07
		
	
	case 7:
		
			r.ILcNonPeriodic08 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic08
		
	
	case 8:
		
			r.ILcNonPeriodic09 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic09
		
	
	case 9:
		
			r.ILcNonPeriodic10 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic10
		
	
	case 10:
		
			r.ILcNonPeriodic11 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic11
		
	
	case 11:
		
			r.ILcNonPeriodic12 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic12
		
	
	case 12:
		
			r.ILcNonPeriodic13 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic13
		
	
	case 13:
		
			r.ILcNonPeriodic14 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic14
		
	
	case 14:
		
			r.ILcNonPeriodic15 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic15
		
	
	case 15:
		
			r.ILcNonPeriodic16 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic16
		
	
	case 16:
		
			r.ILcNonPeriodic17 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic17
		
	
	case 17:
		
			r.ILcNonPeriodic18 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic18
		
	
	case 18:
		
			r.ILcNonPeriodic19 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic19
		
	
	case 19:
		
			r.ILcNonPeriodic20 = NewUnionNullFloat()

		
		
			return r.ILcNonPeriodic20
		
	
	}
	panic("Unknown field index")
}

func (r *ILcNonPeriodic) SetDefault(i int) {
	switch (i) {
	
        
	case 0:
       	 	r.ILcNonPeriodic01 = NewUnionNullFloat()

		return
	
	
        
	case 1:
       	 	r.ILcNonPeriodic02 = NewUnionNullFloat()

		return
	
	
        
	case 2:
       	 	r.ILcNonPeriodic03 = NewUnionNullFloat()

		return
	
	
        
	case 3:
       	 	r.ILcNonPeriodic04 = NewUnionNullFloat()

		return
	
	
        
	case 4:
       	 	r.ILcNonPeriodic05 = NewUnionNullFloat()

		return
	
	
        
	case 5:
       	 	r.ILcNonPeriodic06 = NewUnionNullFloat()

		return
	
	
        
	case 6:
       	 	r.ILcNonPeriodic07 = NewUnionNullFloat()

		return
	
	
        
	case 7:
       	 	r.ILcNonPeriodic08 = NewUnionNullFloat()

		return
	
	
        
	case 8:
       	 	r.ILcNonPeriodic09 = NewUnionNullFloat()

		return
	
	
        
	case 9:
       	 	r.ILcNonPeriodic10 = NewUnionNullFloat()

		return
	
	
        
	case 10:
       	 	r.ILcNonPeriodic11 = NewUnionNullFloat()

		return
	
	
        
	case 11:
       	 	r.ILcNonPeriodic12 = NewUnionNullFloat()

		return
	
	
        
	case 12:
       	 	r.ILcNonPeriodic13 = NewUnionNullFloat()

		return
	
	
        
	case 13:
       	 	r.ILcNonPeriodic14 = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.ILcNonPeriodic15 = NewUnionNullFloat()

		return
	
	
        
	case 15:
       	 	r.ILcNonPeriodic16 = NewUnionNullFloat()

		return
	
	
        
	case 16:
       	 	r.ILcNonPeriodic17 = NewUnionNullFloat()

		return
	
	
        
	case 17:
       	 	r.ILcNonPeriodic18 = NewUnionNullFloat()

		return
	
	
        
	case 18:
       	 	r.ILcNonPeriodic19 = NewUnionNullFloat()

		return
	
	
        
	case 19:
       	 	r.ILcNonPeriodic20 = NewUnionNullFloat()

		return
	
	
	}
	panic("Unknown field index")
}

func (_ *ILcNonPeriodic) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *ILcNonPeriodic) Finalize() { }


func (_ *ILcNonPeriodic) AvroCRC64Fingerprint() []byte {
  return []byte(ILcNonPeriodicAvroCRC64Fingerprint)
}
