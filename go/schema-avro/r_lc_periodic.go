// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type RLcPeriodic struct {

	
	
		RLcPeriodic01 *UnionNullFloat
	

	
	
		RLcPeriodic02 *UnionNullFloat
	

	
	
		RLcPeriodic03 *UnionNullFloat
	

	
	
		RLcPeriodic04 *UnionNullFloat
	

	
	
		RLcPeriodic05 *UnionNullFloat
	

	
	
		RLcPeriodic06 *UnionNullFloat
	

	
	
		RLcPeriodic07 *UnionNullFloat
	

	
	
		RLcPeriodic08 *UnionNullFloat
	

	
	
		RLcPeriodic09 *UnionNullFloat
	

	
	
		RLcPeriodic10 *UnionNullFloat
	

	
	
		RLcPeriodic11 *UnionNullFloat
	

	
	
		RLcPeriodic12 *UnionNullFloat
	

	
	
		RLcPeriodic13 *UnionNullFloat
	

	
	
		RLcPeriodic14 *UnionNullFloat
	

	
	
		RLcPeriodic15 *UnionNullFloat
	

	
	
		RLcPeriodic16 *UnionNullFloat
	

	
	
		RLcPeriodic17 *UnionNullFloat
	

	
	
		RLcPeriodic18 *UnionNullFloat
	

	
	
		RLcPeriodic19 *UnionNullFloat
	

	
	
		RLcPeriodic20 *UnionNullFloat
	

	
	
		RLcPeriodic21 *UnionNullFloat
	

	
	
		RLcPeriodic22 *UnionNullFloat
	

	
	
		RLcPeriodic23 *UnionNullFloat
	

	
	
		RLcPeriodic24 *UnionNullFloat
	

	
	
		RLcPeriodic25 *UnionNullFloat
	

	
	
		RLcPeriodic26 *UnionNullFloat
	

	
	
		RLcPeriodic27 *UnionNullFloat
	

	
	
		RLcPeriodic28 *UnionNullFloat
	

	
	
		RLcPeriodic29 *UnionNullFloat
	

	
	
		RLcPeriodic30 *UnionNullFloat
	

	
	
		RLcPeriodic31 *UnionNullFloat
	

	
	
		RLcPeriodic32 *UnionNullFloat
	

}

const RLcPeriodicAvroCRC64Fingerprint = "\x89\x90J-\xa8\xb8[<"

func NewRLcPeriodic() (*RLcPeriodic) {
	return &RLcPeriodic{}
}

func DeserializeRLcPeriodic(r io.Reader) (*RLcPeriodic, error) {
	t := NewRLcPeriodic()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeRLcPeriodicFromSchema(r io.Reader, schema string) (*RLcPeriodic, error) {
	t := NewRLcPeriodic()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeRLcPeriodic(r *RLcPeriodic, w io.Writer) error {
	var err error
	
	err = writeUnionNullFloat( r.RLcPeriodic01, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic02, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic03, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic04, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic05, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic06, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic07, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic08, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic09, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic10, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic11, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic12, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic13, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic14, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic15, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic16, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic17, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic18, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic19, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic20, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic21, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic22, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic23, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic24, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic25, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic26, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic27, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic28, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic29, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic30, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic31, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.RLcPeriodic32, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *RLcPeriodic) Serialize(w io.Writer) error {
	return writeRLcPeriodic(r, w)
}

func (r *RLcPeriodic) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"rLcPeriodic01\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic02\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic03\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic04\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic05\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic06\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic07\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic08\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic09\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic10\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic11\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic12\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic13\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic14\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic15\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic16\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic17\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic18\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic19\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic20\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic21\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic22\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic23\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic24\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic25\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic26\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic27\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic28\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic29\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic30\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic31\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"rLcPeriodic32\",\"type\":[\"null\",\"float\"]}],\"name\":\"lsst.rLcPeriodic\",\"type\":\"record\"}"
}

func (r *RLcPeriodic) SchemaName() string {
	return "lsst.rLcPeriodic"
}

func (_ *RLcPeriodic) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetInt(v int32) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetLong(v int64) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetString(v string) { panic("Unsupported operation") }
func (_ *RLcPeriodic) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RLcPeriodic) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.RLcPeriodic01 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic01
		
	
	case 1:
		
			r.RLcPeriodic02 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic02
		
	
	case 2:
		
			r.RLcPeriodic03 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic03
		
	
	case 3:
		
			r.RLcPeriodic04 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic04
		
	
	case 4:
		
			r.RLcPeriodic05 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic05
		
	
	case 5:
		
			r.RLcPeriodic06 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic06
		
	
	case 6:
		
			r.RLcPeriodic07 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic07
		
	
	case 7:
		
			r.RLcPeriodic08 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic08
		
	
	case 8:
		
			r.RLcPeriodic09 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic09
		
	
	case 9:
		
			r.RLcPeriodic10 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic10
		
	
	case 10:
		
			r.RLcPeriodic11 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic11
		
	
	case 11:
		
			r.RLcPeriodic12 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic12
		
	
	case 12:
		
			r.RLcPeriodic13 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic13
		
	
	case 13:
		
			r.RLcPeriodic14 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic14
		
	
	case 14:
		
			r.RLcPeriodic15 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic15
		
	
	case 15:
		
			r.RLcPeriodic16 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic16
		
	
	case 16:
		
			r.RLcPeriodic17 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic17
		
	
	case 17:
		
			r.RLcPeriodic18 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic18
		
	
	case 18:
		
			r.RLcPeriodic19 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic19
		
	
	case 19:
		
			r.RLcPeriodic20 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic20
		
	
	case 20:
		
			r.RLcPeriodic21 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic21
		
	
	case 21:
		
			r.RLcPeriodic22 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic22
		
	
	case 22:
		
			r.RLcPeriodic23 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic23
		
	
	case 23:
		
			r.RLcPeriodic24 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic24
		
	
	case 24:
		
			r.RLcPeriodic25 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic25
		
	
	case 25:
		
			r.RLcPeriodic26 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic26
		
	
	case 26:
		
			r.RLcPeriodic27 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic27
		
	
	case 27:
		
			r.RLcPeriodic28 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic28
		
	
	case 28:
		
			r.RLcPeriodic29 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic29
		
	
	case 29:
		
			r.RLcPeriodic30 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic30
		
	
	case 30:
		
			r.RLcPeriodic31 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic31
		
	
	case 31:
		
			r.RLcPeriodic32 = NewUnionNullFloat()

		
		
			return r.RLcPeriodic32
		
	
	}
	panic("Unknown field index")
}

func (r *RLcPeriodic) SetDefault(i int) {
	switch (i) {
	
        
	case 0:
       	 	r.RLcPeriodic01 = NewUnionNullFloat()

		return
	
	
        
	case 1:
       	 	r.RLcPeriodic02 = NewUnionNullFloat()

		return
	
	
        
	case 2:
       	 	r.RLcPeriodic03 = NewUnionNullFloat()

		return
	
	
        
	case 3:
       	 	r.RLcPeriodic04 = NewUnionNullFloat()

		return
	
	
        
	case 4:
       	 	r.RLcPeriodic05 = NewUnionNullFloat()

		return
	
	
        
	case 5:
       	 	r.RLcPeriodic06 = NewUnionNullFloat()

		return
	
	
        
	case 6:
       	 	r.RLcPeriodic07 = NewUnionNullFloat()

		return
	
	
        
	case 7:
       	 	r.RLcPeriodic08 = NewUnionNullFloat()

		return
	
	
        
	case 8:
       	 	r.RLcPeriodic09 = NewUnionNullFloat()

		return
	
	
        
	case 9:
       	 	r.RLcPeriodic10 = NewUnionNullFloat()

		return
	
	
        
	case 10:
       	 	r.RLcPeriodic11 = NewUnionNullFloat()

		return
	
	
        
	case 11:
       	 	r.RLcPeriodic12 = NewUnionNullFloat()

		return
	
	
        
	case 12:
       	 	r.RLcPeriodic13 = NewUnionNullFloat()

		return
	
	
        
	case 13:
       	 	r.RLcPeriodic14 = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.RLcPeriodic15 = NewUnionNullFloat()

		return
	
	
        
	case 15:
       	 	r.RLcPeriodic16 = NewUnionNullFloat()

		return
	
	
        
	case 16:
       	 	r.RLcPeriodic17 = NewUnionNullFloat()

		return
	
	
        
	case 17:
       	 	r.RLcPeriodic18 = NewUnionNullFloat()

		return
	
	
        
	case 18:
       	 	r.RLcPeriodic19 = NewUnionNullFloat()

		return
	
	
        
	case 19:
       	 	r.RLcPeriodic20 = NewUnionNullFloat()

		return
	
	
        
	case 20:
       	 	r.RLcPeriodic21 = NewUnionNullFloat()

		return
	
	
        
	case 21:
       	 	r.RLcPeriodic22 = NewUnionNullFloat()

		return
	
	
        
	case 22:
       	 	r.RLcPeriodic23 = NewUnionNullFloat()

		return
	
	
        
	case 23:
       	 	r.RLcPeriodic24 = NewUnionNullFloat()

		return
	
	
        
	case 24:
       	 	r.RLcPeriodic25 = NewUnionNullFloat()

		return
	
	
        
	case 25:
       	 	r.RLcPeriodic26 = NewUnionNullFloat()

		return
	
	
        
	case 26:
       	 	r.RLcPeriodic27 = NewUnionNullFloat()

		return
	
	
        
	case 27:
       	 	r.RLcPeriodic28 = NewUnionNullFloat()

		return
	
	
        
	case 28:
       	 	r.RLcPeriodic29 = NewUnionNullFloat()

		return
	
	
        
	case 29:
       	 	r.RLcPeriodic30 = NewUnionNullFloat()

		return
	
	
        
	case 30:
       	 	r.RLcPeriodic31 = NewUnionNullFloat()

		return
	
	
        
	case 31:
       	 	r.RLcPeriodic32 = NewUnionNullFloat()

		return
	
	
	}
	panic("Unknown field index")
}

func (_ *RLcPeriodic) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *RLcPeriodic) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *RLcPeriodic) Finalize() { }


func (_ *RLcPeriodic) AvroCRC64Fingerprint() []byte {
  return []byte(RLcPeriodicAvroCRC64Fingerprint)
}
