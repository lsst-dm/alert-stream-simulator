// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"

	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)

func NewRa_decl_CovWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := NewRa_decl_Cov()
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

// container reader
type Ra_decl_CovReader struct {
	r io.Reader
	p *vm.Program
}

func NewRa_decl_CovReader(r io.Reader) (*Ra_decl_CovReader, error){
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewRa_decl_Cov()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &Ra_decl_CovReader {
		r: containerReader,
		p: deser,
	}, nil
}

func (r Ra_decl_CovReader) Read() (*Ra_decl_Cov, error) {
	t := NewRa_decl_Cov()
        err := vm.Eval(r.r, r.p, t)
	return t, err
}
