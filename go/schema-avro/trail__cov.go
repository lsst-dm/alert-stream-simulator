// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type Trail_Cov struct {

	
	
		TrailFluxSigma float32
	

	
	
		TrailRaSigma float32
	

	
	
		TrailDeclSigma float32
	

	
	
		TrailLengthSigma float32
	

	
	
		TrailAngleSigma float32
	

	
	
		TrailFlux_trailRa_Cov float32
	

	
	
		TrailFlux_trailDecl_Cov float32
	

	
	
		TrailFlux_trailLength_Cov float32
	

	
	
		TrailFlux_trailAngle_Cov float32
	

	
	
		TrailRa_trailDecl_Cov float32
	

	
	
		TrailRa_trailLength_Cov float32
	

	
	
		TrailRa_trailAngle_Cov float32
	

	
	
		TrailDecl_trailLength_Cov float32
	

	
	
		TrailDecl_trailAngle_Cov float32
	

	
	
		TrailLength_trailAngle_Cov float32
	

}

const Trail_CovAvroCRC64Fingerprint = "QB\x03\x954\xc6Þƒ"

func NewTrail_Cov() (*Trail_Cov) {
	return &Trail_Cov{}
}

func DeserializeTrail_Cov(r io.Reader) (*Trail_Cov, error) {
	t := NewTrail_Cov()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeTrail_CovFromSchema(r io.Reader, schema string) (*Trail_Cov, error) {
	t := NewTrail_Cov()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeTrail_Cov(r *Trail_Cov, w io.Writer) error {
	var err error
	
	err = vm.WriteFloat( r.TrailFluxSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailRaSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailDeclSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailLengthSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailAngleSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailFlux_trailRa_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailFlux_trailDecl_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailFlux_trailLength_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailFlux_trailAngle_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailRa_trailDecl_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailRa_trailLength_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailRa_trailAngle_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailDecl_trailLength_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailDecl_trailAngle_Cov, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.TrailLength_trailAngle_Cov, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *Trail_Cov) Serialize(w io.Writer) error {
	return writeTrail_Cov(r, w)
}

func (r *Trail_Cov) Schema() string {
	return "{\"fields\":[{\"name\":\"trailFluxSigma\",\"type\":\"float\"},{\"name\":\"trailRaSigma\",\"type\":\"float\"},{\"name\":\"trailDeclSigma\",\"type\":\"float\"},{\"name\":\"trailLengthSigma\",\"type\":\"float\"},{\"name\":\"trailAngleSigma\",\"type\":\"float\"},{\"name\":\"trailFlux_trailRa_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailDecl_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailFlux_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailDecl_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailRa_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailDecl_trailLength_Cov\",\"type\":\"float\"},{\"name\":\"trailDecl_trailAngle_Cov\",\"type\":\"float\"},{\"name\":\"trailLength_trailAngle_Cov\",\"type\":\"float\"}],\"name\":\"lsst.alert.trail_Cov\",\"type\":\"record\"}"
}

func (r *Trail_Cov) SchemaName() string {
	return "lsst.alert.trail_Cov"
}

func (_ *Trail_Cov) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetInt(v int32) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetLong(v int64) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetString(v string) { panic("Unsupported operation") }
func (_ *Trail_Cov) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Trail_Cov) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Float)(&r.TrailFluxSigma)
		
	
	case 1:
		
		
			return (*types.Float)(&r.TrailRaSigma)
		
	
	case 2:
		
		
			return (*types.Float)(&r.TrailDeclSigma)
		
	
	case 3:
		
		
			return (*types.Float)(&r.TrailLengthSigma)
		
	
	case 4:
		
		
			return (*types.Float)(&r.TrailAngleSigma)
		
	
	case 5:
		
		
			return (*types.Float)(&r.TrailFlux_trailRa_Cov)
		
	
	case 6:
		
		
			return (*types.Float)(&r.TrailFlux_trailDecl_Cov)
		
	
	case 7:
		
		
			return (*types.Float)(&r.TrailFlux_trailLength_Cov)
		
	
	case 8:
		
		
			return (*types.Float)(&r.TrailFlux_trailAngle_Cov)
		
	
	case 9:
		
		
			return (*types.Float)(&r.TrailRa_trailDecl_Cov)
		
	
	case 10:
		
		
			return (*types.Float)(&r.TrailRa_trailLength_Cov)
		
	
	case 11:
		
		
			return (*types.Float)(&r.TrailRa_trailAngle_Cov)
		
	
	case 12:
		
		
			return (*types.Float)(&r.TrailDecl_trailLength_Cov)
		
	
	case 13:
		
		
			return (*types.Float)(&r.TrailDecl_trailAngle_Cov)
		
	
	case 14:
		
		
			return (*types.Float)(&r.TrailLength_trailAngle_Cov)
		
	
	}
	panic("Unknown field index")
}

func (r *Trail_Cov) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *Trail_Cov) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Trail_Cov) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *Trail_Cov) Finalize() { }


func (_ *Trail_Cov) AvroCRC64Fingerprint() []byte {
  return []byte(Trail_CovAvroCRC64Fingerprint)
}
