// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type X_y_Cov struct {

	
	
		XSigma float32
	

	
	
		YSigma float32
	

	
	
		X_y_Cov float32
	

}

const X_y_CovAvroCRC64Fingerprint = "J\x9eb\x98\xc8S\xa7\xe5"

func NewX_y_Cov() (*X_y_Cov) {
	return &X_y_Cov{}
}

func DeserializeX_y_Cov(r io.Reader) (*X_y_Cov, error) {
	t := NewX_y_Cov()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeX_y_CovFromSchema(r io.Reader, schema string) (*X_y_Cov, error) {
	t := NewX_y_Cov()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeX_y_Cov(r *X_y_Cov, w io.Writer) error {
	var err error
	
	err = vm.WriteFloat( r.XSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.YSigma, w)
	if err != nil {
		return err
	}
	
	err = vm.WriteFloat( r.X_y_Cov, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *X_y_Cov) Serialize(w io.Writer) error {
	return writeX_y_Cov(r, w)
}

func (r *X_y_Cov) Schema() string {
	return "{\"fields\":[{\"name\":\"xSigma\",\"type\":\"float\"},{\"name\":\"ySigma\",\"type\":\"float\"},{\"name\":\"x_y_Cov\",\"type\":\"float\"}],\"name\":\"lsst.alert.x_y_Cov\",\"type\":\"record\"}"
}

func (r *X_y_Cov) SchemaName() string {
	return "lsst.alert.x_y_Cov"
}

func (_ *X_y_Cov) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetInt(v int32) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetLong(v int64) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetString(v string) { panic("Unsupported operation") }
func (_ *X_y_Cov) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *X_y_Cov) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
		
			return (*types.Float)(&r.XSigma)
		
	
	case 1:
		
		
			return (*types.Float)(&r.YSigma)
		
	
	case 2:
		
		
			return (*types.Float)(&r.X_y_Cov)
		
	
	}
	panic("Unknown field index")
}

func (r *X_y_Cov) SetDefault(i int) {
	switch (i) {
	
        
	
        
	
        
	
	}
	panic("Unknown field index")
}

func (_ *X_y_Cov) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *X_y_Cov) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *X_y_Cov) Finalize() { }


func (_ *X_y_Cov) AvroCRC64Fingerprint() []byte {
  return []byte(X_y_CovAvroCRC64Fingerprint)
}
