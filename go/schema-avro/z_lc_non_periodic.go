// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCES:
 *     lsst.alert.avsc
 *     lsst.alert.cutout.avsc
 *     lsst.alert.diaForcedSource.avsc
 *     lsst.alert.diaNondetectionLimit.avsc
 *     lsst.alert.diaSource.avsc
 *     lsst.diaObject.avsc
 *     lsst.ssObject.avsc
 */
package schema

import (
	"io"
	"github.com/actgardner/gogen-avro/vm/types"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/compiler"
)


type ZLcNonPeriodic struct {

	
	
		ZLcNonPeriodic01 *UnionNullFloat
	

	
	
		ZLcNonPeriodic02 *UnionNullFloat
	

	
	
		ZLcNonPeriodic03 *UnionNullFloat
	

	
	
		ZLcNonPeriodic04 *UnionNullFloat
	

	
	
		ZLcNonPeriodic05 *UnionNullFloat
	

	
	
		ZLcNonPeriodic06 *UnionNullFloat
	

	
	
		ZLcNonPeriodic07 *UnionNullFloat
	

	
	
		ZLcNonPeriodic08 *UnionNullFloat
	

	
	
		ZLcNonPeriodic09 *UnionNullFloat
	

	
	
		ZLcNonPeriodic10 *UnionNullFloat
	

	
	
		ZLcNonPeriodic11 *UnionNullFloat
	

	
	
		ZLcNonPeriodic12 *UnionNullFloat
	

	
	
		ZLcNonPeriodic13 *UnionNullFloat
	

	
	
		ZLcNonPeriodic14 *UnionNullFloat
	

	
	
		ZLcNonPeriodic15 *UnionNullFloat
	

	
	
		ZLcNonPeriodic16 *UnionNullFloat
	

	
	
		ZLcNonPeriodic17 *UnionNullFloat
	

	
	
		ZLcNonPeriodic18 *UnionNullFloat
	

	
	
		ZLcNonPeriodic19 *UnionNullFloat
	

	
	
		ZLcNonPeriodic20 *UnionNullFloat
	

}

const ZLcNonPeriodicAvroCRC64Fingerprint = "&.\xe1Ä¢d;\xa7"

func NewZLcNonPeriodic() (*ZLcNonPeriodic) {
	return &ZLcNonPeriodic{}
}

func DeserializeZLcNonPeriodic(r io.Reader) (*ZLcNonPeriodic, error) {
	t := NewZLcNonPeriodic()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeZLcNonPeriodicFromSchema(r io.Reader, schema string) (*ZLcNonPeriodic, error) {
	t := NewZLcNonPeriodic()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeZLcNonPeriodic(r *ZLcNonPeriodic, w io.Writer) error {
	var err error
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic01, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic02, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic03, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic04, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic05, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic06, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic07, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic08, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic09, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic10, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic11, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic12, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic13, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic14, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic15, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic16, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic17, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic18, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic19, w)
	if err != nil {
		return err
	}
	
	err = writeUnionNullFloat( r.ZLcNonPeriodic20, w)
	if err != nil {
		return err
	}
	
	return err
}

func (r *ZLcNonPeriodic) Serialize(w io.Writer) error {
	return writeZLcNonPeriodic(r, w)
}

func (r *ZLcNonPeriodic) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"zLcNonPeriodic01\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic02\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic03\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic04\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic05\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic06\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic07\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic08\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic09\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic10\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic11\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic12\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic13\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic14\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic15\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic16\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic17\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic18\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic19\",\"type\":[\"null\",\"float\"]},{\"default\":null,\"name\":\"zLcNonPeriodic20\",\"type\":[\"null\",\"float\"]}],\"name\":\"lsst.zLcNonPeriodic\",\"type\":\"record\"}"
}

func (r *ZLcNonPeriodic) SchemaName() string {
	return "lsst.zLcNonPeriodic"
}

func (_ *ZLcNonPeriodic) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetInt(v int32) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetLong(v int64) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetString(v string) { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *ZLcNonPeriodic) Get(i int) types.Field {
	switch (i) {
	
	case 0:
		
			r.ZLcNonPeriodic01 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic01
		
	
	case 1:
		
			r.ZLcNonPeriodic02 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic02
		
	
	case 2:
		
			r.ZLcNonPeriodic03 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic03
		
	
	case 3:
		
			r.ZLcNonPeriodic04 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic04
		
	
	case 4:
		
			r.ZLcNonPeriodic05 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic05
		
	
	case 5:
		
			r.ZLcNonPeriodic06 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic06
		
	
	case 6:
		
			r.ZLcNonPeriodic07 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic07
		
	
	case 7:
		
			r.ZLcNonPeriodic08 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic08
		
	
	case 8:
		
			r.ZLcNonPeriodic09 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic09
		
	
	case 9:
		
			r.ZLcNonPeriodic10 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic10
		
	
	case 10:
		
			r.ZLcNonPeriodic11 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic11
		
	
	case 11:
		
			r.ZLcNonPeriodic12 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic12
		
	
	case 12:
		
			r.ZLcNonPeriodic13 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic13
		
	
	case 13:
		
			r.ZLcNonPeriodic14 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic14
		
	
	case 14:
		
			r.ZLcNonPeriodic15 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic15
		
	
	case 15:
		
			r.ZLcNonPeriodic16 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic16
		
	
	case 16:
		
			r.ZLcNonPeriodic17 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic17
		
	
	case 17:
		
			r.ZLcNonPeriodic18 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic18
		
	
	case 18:
		
			r.ZLcNonPeriodic19 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic19
		
	
	case 19:
		
			r.ZLcNonPeriodic20 = NewUnionNullFloat()

		
		
			return r.ZLcNonPeriodic20
		
	
	}
	panic("Unknown field index")
}

func (r *ZLcNonPeriodic) SetDefault(i int) {
	switch (i) {
	
        
	case 0:
       	 	r.ZLcNonPeriodic01 = NewUnionNullFloat()

		return
	
	
        
	case 1:
       	 	r.ZLcNonPeriodic02 = NewUnionNullFloat()

		return
	
	
        
	case 2:
       	 	r.ZLcNonPeriodic03 = NewUnionNullFloat()

		return
	
	
        
	case 3:
       	 	r.ZLcNonPeriodic04 = NewUnionNullFloat()

		return
	
	
        
	case 4:
       	 	r.ZLcNonPeriodic05 = NewUnionNullFloat()

		return
	
	
        
	case 5:
       	 	r.ZLcNonPeriodic06 = NewUnionNullFloat()

		return
	
	
        
	case 6:
       	 	r.ZLcNonPeriodic07 = NewUnionNullFloat()

		return
	
	
        
	case 7:
       	 	r.ZLcNonPeriodic08 = NewUnionNullFloat()

		return
	
	
        
	case 8:
       	 	r.ZLcNonPeriodic09 = NewUnionNullFloat()

		return
	
	
        
	case 9:
       	 	r.ZLcNonPeriodic10 = NewUnionNullFloat()

		return
	
	
        
	case 10:
       	 	r.ZLcNonPeriodic11 = NewUnionNullFloat()

		return
	
	
        
	case 11:
       	 	r.ZLcNonPeriodic12 = NewUnionNullFloat()

		return
	
	
        
	case 12:
       	 	r.ZLcNonPeriodic13 = NewUnionNullFloat()

		return
	
	
        
	case 13:
       	 	r.ZLcNonPeriodic14 = NewUnionNullFloat()

		return
	
	
        
	case 14:
       	 	r.ZLcNonPeriodic15 = NewUnionNullFloat()

		return
	
	
        
	case 15:
       	 	r.ZLcNonPeriodic16 = NewUnionNullFloat()

		return
	
	
        
	case 16:
       	 	r.ZLcNonPeriodic17 = NewUnionNullFloat()

		return
	
	
        
	case 17:
       	 	r.ZLcNonPeriodic18 = NewUnionNullFloat()

		return
	
	
        
	case 18:
       	 	r.ZLcNonPeriodic19 = NewUnionNullFloat()

		return
	
	
        
	case 19:
       	 	r.ZLcNonPeriodic20 = NewUnionNullFloat()

		return
	
	
	}
	panic("Unknown field index")
}

func (_ *ZLcNonPeriodic) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *ZLcNonPeriodic) Finalize() { }


func (_ *ZLcNonPeriodic) AvroCRC64Fingerprint() []byte {
  return []byte(ZLcNonPeriodicAvroCRC64Fingerprint)
}
